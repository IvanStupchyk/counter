{"version":3,"sources":["redux/actions.ts","reportWebVitals.ts","components/Counter/Scoreboard/Scoreboard.tsx","components/Counter/Btn/Btn.tsx","components/Counter/Counter.tsx","components/CounterSettings/ValueSettings/ValueSettings.tsx","components/CounterSettings/CounterSettings.tsx","App.tsx","redux/counter-reducer.ts","redux/redux-store.ts","utils/localstorage-utils.ts","index.tsx","components/Counter/Counter.module.css","components/Counter/Scoreboard/Scoreboard.module.css","components/CounterSettings/ValueSettings/ValueSettings.module.css","components/Counter/Btn/Btn.module.css"],"names":["COUNTER_ACTIONS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","IncreaseCounterAC","counter","type","INCREASE_COUNTER","payload","ChangeConditionErrorAC","errorMessage","CHANGE_CONDITION_ERROR","EditMinMaxValuerAC","editMinMaxValue","EDIT_MIN_MAX_VALUE","Scoreboard","dispatch","useDispatch","useSelector","state","messageClass","s","message_set_value","limit","counterClass","amount","maxValue","textMessage","useMemo","minValue","className","scoreboard_container","Btn","props","disabledSet","btn","disabledIncReset","disabledInc","disabledBtns","btn_container","btn_disabled","onClick","disabled","Counter","counter_container","ValueSettings","useEffect","classNameInput","input_value","incorrect_value","value_container","values_position","value","onChange","e","currentTarget","CHANGE_MAX_VALUE","CHANGE_MIN_VALUE","CounterSettings","App","initialState","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7ce960fd.chunk.js","sourcesContent":["export enum COUNTER_ACTIONS {\r\n    'CHANGE_MIN_VALUE' = 'counter/actions/change-min-value',\r\n    'CHANGE_MAX_VALUE' = 'counter/actions/change-max-value',\r\n    'INCREASE_COUNTER' = 'counter/actions/increase-counter',\r\n    'CHANGE_CONDITION_ERROR' = 'counter/actions/change-condition-error',\r\n    'EDIT_MIN_MAX_VALUE' = 'counter/actions/edit-min-max-value',\r\n}\r\n\r\ntype ChangeMinValueType = {\r\n    type: COUNTER_ACTIONS.CHANGE_MIN_VALUE\r\n    payload: {minValue: number}\r\n}\r\n\r\nexport const ChangeMinValueAC = (minValue: number): ChangeMinValueType => {\r\n    return {\r\n        type: COUNTER_ACTIONS.CHANGE_MIN_VALUE,\r\n        payload: {minValue}\r\n    }\r\n}\r\n\r\ntype ChangeMaxValueType = {\r\n    type: COUNTER_ACTIONS.CHANGE_MAX_VALUE\r\n    payload: {maxValue: number}\r\n}\r\n\r\nexport const ChangeMaxValueAC = (maxValue: number): ChangeMaxValueType => {\r\n    return {\r\n        type: COUNTER_ACTIONS.CHANGE_MAX_VALUE,\r\n        payload: {maxValue}\r\n    }\r\n}\r\n\r\ntype IncreaseCounterType = {\r\n    type: COUNTER_ACTIONS.INCREASE_COUNTER\r\n    payload: {counter: number}\r\n}\r\n\r\nexport const IncreaseCounterAC = (counter: number): IncreaseCounterType => {\r\n    return {\r\n        type: COUNTER_ACTIONS.INCREASE_COUNTER,\r\n        payload: {counter}\r\n    }\r\n}\r\n\r\ntype ChangeConditionErrorType = {\r\n    type: COUNTER_ACTIONS.CHANGE_CONDITION_ERROR\r\n    payload: {errorMessage: boolean}\r\n}\r\n\r\nexport const ChangeConditionErrorAC = (errorMessage: boolean): ChangeConditionErrorType => {\r\n    return {\r\n        type: COUNTER_ACTIONS.CHANGE_CONDITION_ERROR,\r\n        payload: {errorMessage}\r\n    }\r\n}\r\n\r\ntype EditMinMaxValueType = {\r\n    type: COUNTER_ACTIONS.EDIT_MIN_MAX_VALUE\r\n    payload: {editMinMaxValue: boolean}\r\n}\r\n\r\nexport const EditMinMaxValuerAC = (editMinMaxValue: boolean): EditMinMaxValueType => {\r\n    return {\r\n        type: COUNTER_ACTIONS.EDIT_MIN_MAX_VALUE,\r\n        payload: {editMinMaxValue}\r\n    }\r\n}\r\n\r\nexport type actionsType = ChangeMinValueType | ChangeMaxValueType | IncreaseCounterType | ChangeConditionErrorType | EditMinMaxValueType","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useMemo} from \"react\";\r\nimport s from \"./Scoreboard.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../../redux/redux-store\";\r\nimport {initialStateType} from \"../../../redux/counter-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {actionsType, IncreaseCounterAC} from \"../../../redux/actions\";\r\n\r\n\r\nexport const Scoreboard = () => {\r\n    const dispatch = useDispatch<Dispatch<actionsType>>()\r\n    const counter = useSelector<AppRootState, initialStateType>(state => state.counter)\r\n\r\n    const messageClass = `${s.message_set_value} ${counter.errorMessage && s.limit}`\r\n    const counterClass = `${s.amount} ${counter.counter === counter.maxValue && s.limit}`\r\n\r\n    const textMessage = counter.editMinMaxValue && (counter.errorMessage ? 'Incorrect value!' : 'Enter values and press \\'set\\'')\r\n\r\n    useMemo( () => {\r\n        dispatch(IncreaseCounterAC(counter.minValue))\r\n    }, [counter.editMinMaxValue])\r\n\r\n    return (\r\n        <div className={s.scoreboard_container}>\r\n            <span className={counterClass}>\r\n                {!counter.editMinMaxValue && counter.counter }\r\n            </span>\r\n            <p className={messageClass}>{textMessage}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Btn.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {actionsType, EditMinMaxValuerAC, IncreaseCounterAC} from \"../../../redux/actions\";\r\nimport {AppRootState} from \"../../../redux/redux-store\";\r\nimport {initialStateType} from \"../../../redux/counter-reducer\";\r\n\r\ntype BtnPropsType = {\r\n    btn: \"inc\" | \"reset\" | \"set\"\r\n}\r\n\r\nexport const Btn = (props: BtnPropsType) => {\r\n    const dispatch = useDispatch<Dispatch<actionsType>>()\r\n    const counter = useSelector<AppRootState, initialStateType>(state => state.counter)\r\n\r\n    const disabledSet = props.btn === \"set\" && !counter.editMinMaxValue\r\n    const disabledIncReset = props.btn !== \"set\" && counter.editMinMaxValue || counter.errorMessage\r\n    const disabledInc = props.btn === \"inc\" && counter.counter === counter.maxValue\r\n\r\n    const disabledBtns = disabledSet || disabledInc || disabledIncReset\r\n\r\n    const kindBtn = () => {\r\n        switch (props.btn) {\r\n            case 'inc':\r\n                counter.counter < counter.maxValue && dispatch(IncreaseCounterAC(counter.counter + 1))\r\n                break\r\n            case 'reset':\r\n                dispatch(IncreaseCounterAC(counter.minValue))\r\n                break\r\n            case 'set':\r\n                dispatch(EditMinMaxValuerAC(false))\r\n                break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.btn_container}>\r\n            <button className={`${s.btn} ${disabledBtns && s.btn_disabled}`}\r\n                    onClick={kindBtn}\r\n                    disabled={disabledBtns}\r\n            >\r\n                {props.btn}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Counter.module.css\"\r\nimport {Scoreboard} from \"./Scoreboard/Scoreboard\";\r\nimport {Btn} from \"./Btn/Btn\";\r\n\r\nexport const Counter = () => {\r\n    return (\r\n        <div className={s.counter_container}>\r\n            <Scoreboard/>\r\n\r\n            <div className={s.btn_container}>\r\n                <Btn btn={\"inc\"}/>\r\n                <Btn btn={\"reset\"}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect} from \"react\";\r\nimport s from \"./ValueSettings.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    actionsType,\r\n    ChangeConditionErrorAC,\r\n    ChangeMaxValueAC,\r\n    ChangeMinValueAC,\r\n    EditMinMaxValuerAC\r\n} from \"../../../redux/actions\";\r\nimport {AppRootState} from \"../../../redux/redux-store\";\r\nimport {initialStateType} from \"../../../redux/counter-reducer\";\r\n\r\nexport const ValueSettings = () => {\r\n    const dispatch = useDispatch<Dispatch<actionsType>>()\r\n    const counter = useSelector<AppRootState, initialStateType>(state => state.counter)\r\n\r\n    useEffect(() => {\r\n        counter.minValue >= counter.maxValue || counter.minValue < 0 || counter.maxValue <= 0 ? dispatch(ChangeConditionErrorAC(true)) : dispatch(ChangeConditionErrorAC(false))\r\n    }, [counter.minValue, counter.maxValue])\r\n\r\n    const classNameInput = `${s.input_value} ${counter.errorMessage ? s.incorrect_value : ''}`\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(ChangeMaxValueAC(+e.currentTarget.value))\r\n        dispatch(EditMinMaxValuerAC(true))\r\n    }\r\n\r\n    const changeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(ChangeMinValueAC(+e.currentTarget.value))\r\n        dispatch(EditMinMaxValuerAC(true))\r\n    }\r\n\r\n    return (\r\n        <div className={s.value_container}>\r\n            <div className={s.values_position}>\r\n                <p>max value:</p>\r\n                <input type={\"number\"}\r\n                       className={classNameInput}\r\n                       value={counter.maxValue}\r\n                       onChange={changeMaxValue}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.values_position}>\r\n                <p>start value:</p>\r\n                <input type={\"number\"}\r\n                       className={classNameInput}\r\n                       value={counter.minValue}\r\n                       onChange={changeMinValue}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../Counter/Counter.module.css\"\r\nimport {ValueSettings} from \"./ValueSettings/ValueSettings\";\r\nimport {Btn} from \"../Counter/Btn/Btn\";\r\n\r\n\r\nexport const CounterSettings = () => {\r\n    return (\r\n        <div className={s.counter_container}>\r\n            <ValueSettings/>\r\n\r\n            <div className={s.btn_container}>\r\n                <Btn btn={\"set\"}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {CounterSettings} from \"./components/CounterSettings/CounterSettings\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <CounterSettings/>\n            <Counter/>\n        </div>\n    );\n}\n\n","import {actionsType} from \"./actions\";\r\n\r\nexport type initialStateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    counter: number\r\n    editMinMaxValue: boolean\r\n    errorMessage: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    counter: 0,\r\n    editMinMaxValue: false,\r\n    errorMessage: false\r\n}\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: actionsType): initialStateType => {\r\n    return action.type ? {...state, ...action.payload} : state\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    });\r\n})","import {AppRootState} from \"../redux/redux-store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('counter-values');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppRootState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('counter-values', serializedState);\r\n    } catch {\r\n\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_container\":\"Counter_counter_container__zIZBW\",\"btn_container\":\"Counter_btn_container__2jEVb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard_container\":\"Scoreboard_scoreboard_container__3SXqf\",\"amount\":\"Scoreboard_amount__1nvzx\",\"message_set_value\":\"Scoreboard_message_set_value__zdCwu\",\"limit\":\"Scoreboard_limit__17oh-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value_container\":\"ValueSettings_value_container__27Xx4\",\"values_position\":\"ValueSettings_values_position__3QxV4\",\"input_value\":\"ValueSettings_input_value__1LO2u\",\"incorrect_value\":\"ValueSettings_incorrect_value__1DVl6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Btn_btn__3rnij\",\"btn_disabled\":\"Btn_btn_disabled__H8Ke7\"};"],"sourceRoot":""}