{"version":3,"sources":["components/CounterSettings/ValueSettings/ValueSettings.module.css","components/Counter/Scoreboard/Scoreboard.module.css","components/Counter/Counter.module.css","components/Counter/Buttons/Buttons.module.css","components/Counter/Buttons/Btn/Btn.module.css","components/Counter/Scoreboard/Scoreboard.tsx","components/Counter/Buttons/Btn/Btn.tsx","components/Counter/Buttons/Buttons.tsx","components/Counter/Counter.tsx","components/CounterSettings/ValueSettings/ValueSettings.tsx","components/CounterSettings/BtnSet/BtnSet.tsx","components/CounterSettings/CounterSettings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Scoreboard","props","errorMessage","inputMinError","inputMaxError","className","s","scoreboard_container","amount","counter","maxValue","limit","changeValue","message_set_value","Btn","disabledSet","btn","disabledIncReset","disabledInc","disabledBtns","btn_container","btn_disabled","disabled","onClick","increaseCounter","resetCounter","setValues","localStorage","setItem","JSON","stringify","minValue","intermediateMinValue","intermediateMaxValue","Buttons","Counter","counter_container","ValueSettings","classNameInputMax","input_value","incorrect_value","classNameInputMin","value_container","values_position","type","onChange","e","changeMaxValue","currentTarget","value","getStateValues","changeMinValue","BtnSet","CounterSettings","App","JsonValues","getItem","CounterValues","parse","useState","setIntermediateMinValue","setIntermediateMaxValue","setMinValue","setMaxValue","setCounter","setChangeValue","state","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1c2ebc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"value_container\":\"ValueSettings_value_container__27Xx4\",\"values_position\":\"ValueSettings_values_position__3QxV4\",\"input_value\":\"ValueSettings_input_value__1LO2u\",\"incorrect_value\":\"ValueSettings_incorrect_value__1DVl6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard_container\":\"Scoreboard_scoreboard_container__3SXqf\",\"amount\":\"Scoreboard_amount__1nvzx\",\"message_set_value\":\"Scoreboard_message_set_value__zdCwu\",\"limit\":\"Scoreboard_limit__17oh-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_container\":\"Counter_counter_container__zIZBW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn_container\":\"Buttons_btn_container__3XPzD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Btn_btn__3Z4yy\",\"btn_disabled\":\"Btn_btn_disabled__3ujjJ\"};","import React from \"react\";\r\nimport s from \"./Scoreboard.module.css\"\r\n\r\ntype ScoreboardPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    intermediateMinValue: number\r\n    intermediateMaxValue: number\r\n    inputMaxError: boolean\r\n    inputMinError: boolean\r\n    changeValue: boolean\r\n}\r\n\r\nexport const Scoreboard = (props: ScoreboardPropsType) => {\r\n    const errorMessage = (props.inputMinError || props.inputMaxError) && 'Incorrect value'\r\n\r\n    return (\r\n        <div className={s.scoreboard_container}>\r\n            <span className={`${s.amount} ${props.counter === props.maxValue ? s.limit : \"\"}`}>\r\n                {!props.changeValue && props.counter}\r\n            </span>\r\n            <p className={`${s.message_set_value} ${errorMessage && s.limit}`}> {errorMessage || props.changeValue && 'Enter values and press \\'set\\''}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Btn.module.css\"\r\n\r\n\r\ntype BtnPropsType = {\r\n    increaseCounter?: () => void\r\n    resetCounter?: () => void\r\n    counter?: number\r\n    btn: \"inc\" | \"reset\" | \"set\"\r\n    maxValue: number\r\n    minValue: number\r\n    setValues?: () => void\r\n    intermediateMinValue: number\r\n    intermediateMaxValue: number\r\n    errorMessage?: boolean\r\n    changeValue: boolean\r\n}\r\n\r\nexport const Btn = (props: BtnPropsType) => {\r\n    const disabledSet = props.btn === \"set\" && !props.changeValue\r\n    const disabledIncReset = props.btn !== \"set\" && props.changeValue\r\n    const disabledInc = props.btn === \"inc\" && props.counter === props.maxValue\r\n    const disabledBtns = disabledSet || props.errorMessage || disabledIncReset || disabledInc\r\n\r\n    const increaseCounter = () => {\r\n        props.increaseCounter && props.increaseCounter()\r\n    }\r\n\r\n    const resetCounter = () => {\r\n        props.resetCounter && props.resetCounter()\r\n    }\r\n\r\n    const setValues = () => {\r\n        props.setValues && props.setValues()\r\n\r\n        localStorage.setItem('Counter Values',\r\n            JSON.stringify({\r\n                minValue: props.intermediateMinValue,\r\n                maxValue: props.intermediateMaxValue\r\n            }))\r\n    }\r\n\r\n    const kindBtn = () => {\r\n        switch (props.btn) {\r\n            case \"inc\":\r\n                increaseCounter()\r\n                break\r\n            case \"reset\":\r\n                resetCounter()\r\n                break\r\n            case \"set\":\r\n                setValues()\r\n                break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.btn_container}>\r\n            <button className={`${s.btn} ${disabledBtns ? s.btn_disabled : ''}`}\r\n                    disabled={disabledBtns}\r\n                    onClick={kindBtn}>\r\n                {props.btn}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Buttons.module.css\"\r\nimport {Btn} from \"./Btn/Btn\";\r\n\r\nexport type ButtonsPropsType = {\r\n    increaseCounter: () => void\r\n    resetCounter: () => void\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    intermediateMinValue: number\r\n    intermediateMaxValue: number\r\n    changeValue: boolean\r\n}\r\n\r\nexport const Buttons = (props: ButtonsPropsType) => {\r\n    return (\r\n        <div className={s.btn_container}>\r\n            <Btn increaseCounter={props.increaseCounter}\r\n                 resetCounter={props.resetCounter}\r\n                 counter={props.counter}\r\n                 maxValue={props.maxValue}\r\n                 minValue={props.minValue}\r\n                 intermediateMinValue={props.intermediateMinValue}\r\n                 intermediateMaxValue={props.intermediateMaxValue}\r\n                 btn={\"inc\"}\r\n                 changeValue={props.changeValue}\r\n            />\r\n            <Btn increaseCounter={props.increaseCounter}\r\n                 resetCounter={props.resetCounter}\r\n                 counter={props.counter}\r\n                 maxValue={props.maxValue}\r\n                 minValue={props.minValue}\r\n                 intermediateMinValue={props.intermediateMinValue}\r\n                 intermediateMaxValue={props.intermediateMaxValue}\r\n                 btn={\"reset\"}\r\n                 changeValue={props.changeValue}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Counter.module.css\"\r\nimport {Scoreboard} from \"./Scoreboard/Scoreboard\";\r\nimport {Buttons} from \"./Buttons/Buttons\";\r\n\r\ntype CounterPropsType = {\r\n    counter: number\r\n    increaseCounter: () => void\r\n    resetCounter: () => void\r\n    maxValue: number\r\n    minValue: number\r\n    intermediateMinValue: number\r\n    intermediateMaxValue: number\r\n    inputMaxError: boolean\r\n    inputMinError: boolean\r\n    changeValue: boolean\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n    return (\r\n        <div className={s.counter_container}>\r\n            <Scoreboard counter={props.counter}\r\n                        minValue={props.minValue}\r\n                        maxValue={props.maxValue}\r\n                        intermediateMinValue={props.intermediateMinValue}\r\n                        intermediateMaxValue={props.intermediateMaxValue}\r\n                        inputMaxError={props.inputMaxError}\r\n                        inputMinError={props.inputMinError}\r\n                        changeValue={props.changeValue}\r\n            />\r\n            <Buttons increaseCounter={props.increaseCounter}\r\n                     resetCounter={props.resetCounter}\r\n                     counter={props.counter}\r\n                     maxValue={props.maxValue}\r\n                     minValue={props.minValue}\r\n                     intermediateMinValue={props.intermediateMinValue}\r\n                     intermediateMaxValue={props.intermediateMaxValue}\r\n                     changeValue={props.changeValue}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./ValueSettings.module.css\"\r\n\r\ntype ValueSettingsPropsType = {\r\n    intermediateMinValue: number\r\n    intermediateMaxValue: number\r\n    changeMaxValue: (value: string) => void\r\n    changeMinValue: (value: string) => void\r\n    inputMaxError: boolean\r\n    inputMinError: boolean\r\n    getStateValues: (state: boolean) => void\r\n}\r\n\r\nexport const ValueSettings = (props: ValueSettingsPropsType) => {\r\n    const classNameInputMax = `${s.input_value} ${props.inputMaxError ? s.incorrect_value : ''}`\r\n    const classNameInputMin = `${s.input_value} ${props.inputMinError ? s.incorrect_value : ''}`\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(e.currentTarget.value)\r\n        props.getStateValues(true)\r\n    }\r\n\r\n    const changeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMinValue(e.currentTarget.value)\r\n        props.getStateValues(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.value_container}>\r\n            <div className={s.values_position}>\r\n                <p>max value:</p>\r\n\r\n                <input className={classNameInputMax} type={\"number\"}\r\n                       onChange={changeMaxValue}\r\n                       value={props.intermediateMaxValue}\r\n                />\r\n            </div>\r\n            <div className={s.values_position}>\r\n                <p>start value:</p>\r\n\r\n                <input className={classNameInputMin} type={\"number\"}\r\n                       onChange={changeMinValue}\r\n                       value={props.intermediateMinValue}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../../Counter/Buttons/Buttons.module.css\"\r\nimport {Btn} from \"../../Counter/Buttons/Btn/Btn\";\r\n\r\nexport type ButtonsPropsType = {\r\n    setValues: () => void\r\n    intermediateMinValue: number\r\n    intermediateMaxValue: number\r\n    maxValue: number\r\n    minValue: number\r\n    errorMessage: boolean\r\n    changeValue: boolean\r\n}\r\n\r\nexport const BtnSet = (props: ButtonsPropsType) => {\r\n    return (\r\n        <div className={s.btn_container}>\r\n            <Btn\r\n                btn={\"set\"}\r\n                setValues={props.setValues}\r\n                intermediateMinValue={props.intermediateMinValue}\r\n                intermediateMaxValue={props.intermediateMaxValue}\r\n                maxValue={props.maxValue}\r\n                minValue={props.minValue}\r\n                errorMessage={props.errorMessage}\r\n                changeValue={props.changeValue}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../Counter/Counter.module.css\"\r\nimport {ValueSettings} from \"./ValueSettings/ValueSettings\";\r\nimport {BtnSet} from \"./BtnSet/BtnSet\";\r\n\r\ntype CounterSettingsPropsType = {\r\n    intermediateMinValue: number\r\n    intermediateMaxValue: number\r\n    changeMaxValue: (value: string) => void\r\n    changeMinValue: (value: string) => void\r\n    setValues: () => void\r\n    maxValue: number\r\n    minValue: number\r\n    inputMaxError: boolean\r\n    inputMinError: boolean\r\n    errorMessage: boolean\r\n    getStateValues: (state: boolean) => void\r\n    changeValue: boolean\r\n}\r\n\r\nexport const CounterSettings = (props: CounterSettingsPropsType) => {\r\n    return (\r\n        <div className={s.counter_container}>\r\n            <ValueSettings\r\n                intermediateMinValue={props.intermediateMinValue}\r\n                intermediateMaxValue={props.intermediateMaxValue}\r\n                changeMaxValue={props.changeMaxValue}\r\n                changeMinValue={props.changeMinValue}\r\n                inputMaxError={props.inputMaxError}\r\n                inputMinError={props.inputMinError}\r\n                getStateValues={props.getStateValues}\r\n            />\r\n\r\n            <BtnSet\r\n                setValues={props.setValues}\r\n                intermediateMinValue={props.intermediateMinValue}\r\n                intermediateMaxValue={props.intermediateMaxValue}\r\n                maxValue={props.maxValue}\r\n                minValue={props.minValue}\r\n                errorMessage={props.errorMessage}\r\n                changeValue={props.changeValue}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {CounterSettings} from \"./components/CounterSettings/CounterSettings\";\n\nfunction App() {\n\n    const JsonValues = localStorage.getItem('Counter Values')\n    const CounterValues = JsonValues && JSON.parse(JsonValues)\n\n    const [intermediateMinValue, setIntermediateMinValue] = useState<number>(CounterValues ? CounterValues.minValue : 0)\n    const [intermediateMaxValue, setIntermediateMaxValue] = useState<number>(CounterValues ? CounterValues.maxValue : 5)\n\n    const [minValue, setMinValue] = useState<number>(intermediateMinValue)\n    const [maxValue, setMaxValue] = useState<number>(intermediateMaxValue)\n\n    const [counter, setCounter] = useState<number>(minValue)\n\n    const [changeValue, setChangeValue] = useState<boolean>(false)\n\n    const getStateValues = (state: boolean) => {\n        setChangeValue(state)\n    }\n\n    const increaseCounter = () => {\n        counter < maxValue && setCounter(prev => prev + 1)\n    }\n\n    const inputMaxError = intermediateMaxValue < 0 || intermediateMaxValue <= intermediateMinValue\n    const inputMinError = intermediateMinValue < 0 || intermediateMinValue >= intermediateMaxValue\n    const errorMessage = inputMinError || inputMaxError\n\n    const resetCounter = () => {\n        setCounter(minValue)\n    }\n\n    const changeMaxValue = (value: string) => {\n        setIntermediateMaxValue(+value)\n    }\n\n    const changeMinValue = (value: string) => {\n        setIntermediateMinValue(+value)\n    }\n\n    const setValues = () => {\n        if (!errorMessage) {\n            setMinValue(intermediateMinValue)\n            setMaxValue(intermediateMaxValue)\n            setCounter(intermediateMinValue)\n            getStateValues(false)\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <CounterSettings\n                intermediateMinValue={intermediateMinValue}\n                intermediateMaxValue={intermediateMaxValue}\n                changeMaxValue={changeMaxValue}\n                changeMinValue={changeMinValue}\n                setValues={setValues}\n                maxValue={maxValue}\n                minValue={minValue}\n                inputMaxError={inputMaxError}\n                inputMinError={inputMinError}\n                errorMessage={errorMessage}\n                getStateValues={getStateValues}\n                changeValue={changeValue}\n            />\n            <Counter counter={counter}\n                     increaseCounter={increaseCounter}\n                     resetCounter={resetCounter}\n                     maxValue={maxValue}\n                     minValue={minValue}\n                     intermediateMinValue={intermediateMinValue}\n                     intermediateMaxValue={intermediateMaxValue}\n                     inputMaxError={inputMaxError}\n                     inputMinError={inputMinError}\n                     changeValue={changeValue}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}